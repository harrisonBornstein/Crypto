# This file was *autogenerated* from the file ./Crypto/midterm2.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_607 = Integer(607); _sage_const_600 = Integer(600); _sage_const_50000 = Integer(50000); _sage_const_105 = Integer(105); _sage_const_609 = Integer(609); _sage_const_4000000000000000000000000000000000000000000 = Integer(4000000000000000000000000000000000000000000); _sage_const_1000000000000000000000000000000000000 = Integer(1000000000000000000000000000000000000); _sage_const_31 = Integer(31)# Current smoothest A:
# 1003176071112866192112901008112932095113848799
#
# Current minimum smoothness:
# 68
#
# Our minimum number: 112866192112901008112932095113848799
#

# Read in data
path = '/home/harrib4/Crypto/data2.txt'
input = file(path,'r')
inputValues = input.readline().split(" ")
input.close()

# Define variables
minA = int(inputValues[_sage_const_2 ])
maxA = int(inputValues[_sage_const_3 ])
maxSearchSpace = _sage_const_2 **_sage_const_600 
A = minA
minSmoothness = int(inputValues[_sage_const_1 ])

print("start point: ")
print(str(minA))

# Set up fields
R = GF(_sage_const_2 )['x']; (x,) = R._first_ngens(1)
Q = QuotientRing(R, x**_sage_const_609  + x**_sage_const_31  + _sage_const_1 , names=('a',)); (a,) = Q._first_ngens(1)
poly = a**_sage_const_607  + a**_sage_const_105  + _sage_const_1 
ans = poly**A

#increments
increment = _sage_const_1000000000000000000000000000000000000 
expIncrement = poly**increment
searchCycleIncrement = _sage_const_4000000000000000000000000000000000000000000 

while A <= maxSearchSpace:
    print("Beginning new cycle. start: " + str(minA) + ", end: " + str(maxA))

    i =_sage_const_0 
    while A <= maxA:
    #for i in range (0, 100):
        # Factorization & smoothness calculation
        factorization = lift(ans).factor()
        smoothness = factorization[len(factorization)-_sage_const_1 ][_sage_const_0 ].degree()
        
        # Have we found a minimum?
        if (smoothness < minSmoothness):
            minSmoothness = smoothness
            # print result
            print("new min with: " + str(A))
            print("current min: " + str(minSmoothness))
            
            f = file(path,'w')
            f.write(str(A) + " ")
            f.write(str(minSmoothness) + " ")
            f.write(str(minA) + " ")
            f.write(str(maxA))
            f.close()
        
        # increment A
        A += increment
        ans = ans*expIncrement
        
        # make sure it's still alive
        if i % _sage_const_50000  == _sage_const_0 :
            print("time step: " + str(i))
        i+= _sage_const_1 
    
    print("Finished cycle. start: " + str(minA) + ", end: " + str(maxA))
    
    # Increment seach space and begin cycle again
    minA += searchCycleIncrement
    maxA += searchCycleIncrement
    
    f = file(path,'w')
    f.write(str(A) + " ")
    f.write(str(minSmoothness) + " ")
    f.write(str(minA) + " ")
    f.write(str(maxA))
    f.close()
